version: '3'

tasks:
  create:
    vars:
      CLUSTER_NAME: "{{ .CLUSTER_NAME }}"
      DISABLE_TRAEFIK: '{{ .DISABLE_TRAEFIK }}'
      DISABLE_LOCAL_STORAGE: '{{ .DISABLE_LOCAL_STORAGE }}'
      EXTRA_VARS: '{{ .EXTRA_VARS | default "" }}'
    env:
      K3D_FIX_DNS: 1
    cmds:
      - >
        k3d cluster create {{ .CLUSTER_NAME }} 
        --servers 1 
        -p "80:80@loadbalancer" 
        -p "443:443@loadbalancer" 
        -p "127.0.0.1:53:32220/tcp@server:0" 
        -p "127.0.0.1:53:32220/udp@server:0" 
        --k3s-arg "--default-local-storage-path=/k3s-pv@servers:*" 
        --volume /k3s:/k3s@all 
        --volume /k3s-pv:/k3s-pv@all
        {{ if .DISABLE_TRAEFIK }}--k3s-arg --disable=traefik@server:0{{end}}
        {{ if .DISABLE_LOCAL_STORAGE }}--k3s-arg --disable=local-storage@server:0{{end}}
        {{ .EXTRA_VARS }}
      - touch {{ .STATUS_FILES_PATH }}/{{ .TASK }}
      - task: create-admin-service-account
    status:
      - test -f {{ .STATUS_FILES_PATH }}/{{ .TASK }}

  delete:
    vars:
      CLUSTER_NAME: "{{ .CLUSTER_NAME }}"
    cmds:
      - >
        k3d cluster delete {{ .CLUSTER_NAME }} 
      - rm -rf .taskfiles/statusfiles/*

  wait-for-traefik:
    cmds:
    - sleep 5s
    - kubectl wait -n kube-system job/helm-install-traefik --for condition=Complete --timeout 300s
    - sleep 5s
    - kubectl wait -n kube-system deployment/traefik --for condition=Available --timeout 300s
    - kubectl apply -f manifests/traefik-ingress-route.yaml
    
  create-admin-service-account:
    cmds:
    - kubectl -n kube-system create serviceaccount admin
    - >
      kubectl create clusterrolebinding admin
      --clusterrole cluster-admin
      --serviceaccount=kube-system:admin
    - touch {{ .STATUS_FILES_PATH }}/{{ .TASK }}
    status:
    - test -f {{ .STATUS_FILES_PATH }}/{{ .TASK }}

  get-admin-token:
    desc: Display token with admin privileges
    deps:
    - create-admin-service-account
    env:
      SECRET_NAME:
        sh: kubectl get secrets -n kube-system -o name | grep admin
    cmds:
    - kubectl get -n kube-system ${SECRET_NAME} -o jsonpath='{.data.token}' | base64 -d && echo